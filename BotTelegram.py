import telebot, requests, os, re, threading, glob
from telebot import types

bot = telebot.TeleBot('6149957194:AAHvsUnLJPLMWzxHP3Qik6dhqxiSZziuV04')
requests.get('https://t.me/@TestMapInChatBot')

groups = [619484745]  # chat id
dict = {'–ü—Ä–∏–º–æ—Ä—å—è': 'https://192.168.233.171:25443/'}

@bot.message_handler(func=lambda message: message.chat.id not in groups)
def some(message):
    bot.send_message(message.chat.id, '–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω')
def remove_pic(test_name):
    folder_path = './Results/Results_sc'
    file_list = os.listdir(folder_path)
    try:
        for file_name in file_list:
            if file_name.endswith(''+test_name+'.png'):
                file_path = os.path.join(folder_path, file_name)
                os.remove(file_path)
    except Exception:
        pass


def send_pic(message, test_name):
    try:
        a = open('./Results/Results_sc/–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è_'+test_name+'.png', 'rb')
        bot.send_photo(message.chat.id, a)
    except Exception:
        pass
    try:
        b = open('./Results/Results_sc/–î–Ω–µ–≤–Ω–∏–∫_'+test_name+'.png', 'rb')
        bot.send_photo(message.chat.id, b)
    except Exception:
        pass
    try:
        c = open('./Results/Results_sc/–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_'+test_name+'.png', 'rb')
        bot.send_photo(message.chat.id, c)
    except Exception:
        pass
    try:
        d = open('./Results/Results_sc/–ì–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è_'+test_name+'.png', 'rb')
        bot.send_photo(message.chat.id, d)
    except Exception:
        pass
    try:
        i = open('./Results/Results_sc/–ü–æ–∏—Å–∫_'+test_name+'.png', 'rb')
        bot.send_photo(message.chat.id, i)
    except Exception:
        pass
    try:
        r = open('./Results/Results_sc/–†–µ–µ—Å—Ç—Ä–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏_'+test_name+'.png', 'rb')
        bot.send_photo(message.chat.id, r)
    except Exception:
        pass
    try:
        r2 = open('./Results/Results_sc/–†–µ–µ—Å—Ç—Ä–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–∞_'+test_name+'.png', 'rb')
        bot.send_photo(message.chat.id, r2)
    except Exception:
        pass

def create_log(message, test_name):
    if not os.path.exists("Results/Results_"+test_name+".log"):
        with open("Results/Results_"+test_name+".log", "w") as file:
            file.write('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞.\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–∏–º–µ—Ä–Ω–æ 2-3 –º–∏–Ω—É—Ç—ã).')
        pass
    else:
        with open("Results/Results_"+test_name+".log", "r") as file:
            f = file.read()
            bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text=f)
            file.close()
            exit()

def autotest_prod(message, test_name, address):
    bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text="üî¥–ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç. –º–æ–¥—É–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ <a href='"+address+"'>"'<u><b>'+test_name+'</b></u>'"</a>", parse_mode='html')
    remove_pic(test_name)
    create_log(message, test_name)
    os.system('pytest --testit -s '+test_name+'.py > Results/'+test_name+'.log')  # –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ test.py –∏ –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª logs.txt
    with open('Results/'+test_name+'.log', 'r', -1, 'utf-8') as file:
        f = file.read()
        opt_3 = f[f.find('['): f.rfind('~')]
    bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text="üü¢–ó–∞–∫–æ–Ω—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç. –º–æ–¥—É–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ <a href='"+address+"'><u><b>"+test_name+"</b></u></a>", parse_mode='html')
    bot.send_message(message.chat.id, opt_3)
    send_pic(message, test_name)
    os.remove("./Results/Results_" + test_name + ".log")

def start_autotest_thread(message, test_name, address):
    thread = threading.Thread(target=autotest_prod, args=(message, test_name, address))
    thread.start()

@bot.message_handler(commands=["start"])
def any_msg(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text="–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π", callback_data="–ü—Ä–∏–º–æ—Ä—å—è")
    btn2 = types.InlineKeyboardButton(text="–ü—Ä–∏–º–µ—Ä(üö´)")
    markup.row(btn1, btn2)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω/–æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n–∫—Ä–∏—Ç. –º–æ–¥—É–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ —Å–µ—Ä–≤–∏—Å–∞ - –ú–ò–°", reply_markup=markup)

@bot.message_handler(commands=["help"])
def help_msg(message):
    bot.send_message(message.chat.id, '<b>–ü—Ä–∞–≤–∏–ª–∞ –ø–æ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –±–æ—Ç–∞:</b>'
                                      '\n‚ñ™Ô∏è  <b>–ú</b>–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–µ–Ω–¥–æ–≤ - 10;'
                                      '\n‚ñ™Ô∏è  <b>–ï</b>—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ '
                                      '–ø–∞—Ü–∏–µ–Ω—Ç–∞ - —Å–ª–µ–¥—É–µ—Ç –µ–≥–æ —É–¥–∞–ª–∏—Ç—å (<i>–æ–±—Ä–∞—Ç–∏—Ç–µ—Ç—å –∫ –î–µ–∂—É—Ä–Ω–æ–º—É –°–¶ (@bg_sitcenter)</i>);'
                                      '\n‚ñ™Ô∏è  <b>–ü</b>–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ - "AUTO-TEST", –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏;'
                                      '\n‚ñ™Ô∏è  <b>–ï</b>—Å–ª–∏ –∫—Ä–∏—Ç. –º–æ–¥—É–ª—å –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å—É–º–º–∞—Ä–Ω–æ –±–æ–ª–µ–µ - 200 —Å–µ–∫—É–Ω–¥, '
                                      '–≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–∏—á–∏–Ω–∞ –≤ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ '
                                      '(<i><u><b>–ø—Ä–æ–≤–µ—Ä–∏—Ç—å</b></u> —á—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å –Ω–∞ –¥–∏—Å–∫–∞—Ö –∏ CPU –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ DB/WEB</i>);'
                                      '\n‚ñ™Ô∏è  <b>–ü</b>—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∏–ª–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –æ—Ç–¥–µ–ª–∞.'
                                      '\n\n<b>–†–∞–∑–±–æ—Ä –æ—à–∏–±–æ–∫:</b>'
                                      '\n‚ñ∂Ô∏è  <b>Message: Not found</b> - –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: —Å–º–µ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–ø–∏—Å–∞–Ω. –°–ª–µ–¥—É–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ <u>—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É</u>.'
                                      '\n‚ñ∂Ô∏è  <b>Message: Element not interactable</b> - —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ–ª—å–∑—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –Ω–µ –¥–æ–Ω–µ—Å–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ. –°–ª–µ–¥—É–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–µ–Ω–¥, –ø—Ä–∏ –≤—ã—è–≤–ª–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å –≤ —á–∞—Ç <u>–û–ö–ö</u> –∏ <u>—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É</u>.'
                                      '\n‚ñ∂Ô∏è  <b>Message: Element click intercepted</b> - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ –∫–∞–∫–∏–º –ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏–µ–º —Å–∞–º–æ–π —Å–∏—Å—Ç–µ–º—ã. –°–ª–µ–¥—É–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–µ–Ω–¥, –ø—Ä–∏ –≤—ã—è–≤–ª–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫ —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å <u>—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É</u>.'
                                      '\n\n<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>'
                                      '\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ - –ê—Ö—Ç—è–º–æ–≤ –¢–∏–º—É—Ä (<i>@ELCUY</i>).'
                                      '\n–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ - –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–ª–æ—Ç–Ω–∏–∫–æ–≤ (<i>@glafkon</i>).', parse_mode='html')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline_1(call):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
    if call.message:
        if call.data == call.data:
            start_autotest_thread(call.message, test_name=call.data, address=dict[call.data])
        else:
            print('–ö–Ω–æ–ø–∫–∞ –Ω–µ –∏–º–µ–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞')
            pass


# bot.polling(none_stop=True, interval=0)
bot.infinity_polling(none_stop=True)
# bot.polling(none_stop=True, timeout=123)
